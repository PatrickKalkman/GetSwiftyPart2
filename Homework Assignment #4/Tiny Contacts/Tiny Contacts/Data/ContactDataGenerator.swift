//
//  ContactDataGenerator.swift
//  Tiny Contacts
//
//  Created by Patrick Kalkman on 10/05/2019.
//  Copyright Â© 2019 SimpleTechture. All rights reserved.
//

import Foundation
import CoreData

class ContactDataGenerator {

    private let firstNames = [
        "Carmelita",
        "Lyndsay",
        "Rosmunda",
        "Glen",
        "Arlen",
        "Willi",
        "Regina",
        "Pebrook",
        "Georges",
        "Maggy",
        "Salmon",
        "Miller",
        "Joseph",
        "Ethelyn",
        "Rorke",
        "Robbert",
        "Andy",
        "Cherry",
        "Terese",
        "Dorian",
        "Annora",
        "Charin",
        "Friedrich",
        "Tove",
        "Barry",
        "Mella",
        "Justina",
        "Delmore",
        "Reggis",
        "Lottie",
        "Holly",
        "Kimball",
        "Lancelot",
        "Min",
        "Ynes",
        "Butch",
        "Perren",
        "Shaw",
        "Robbert",
        "Patrice",
        "Johan",
        "Berna",
        "Pren",
        "Orland",
        "Laraine",
        "Wilone",
        "Laurene",
        "Enid",
        "Karlee",
        "Biron",
        "Gigi",
        "Chandra",
        "Eba",
        "Chlo",
        "Dedra",
        "Bambie",
        "Bronny",
        "Rudyard",
        "Riordan",
        "Joshuah",
        "Malissia",
        "Flint",
        "Marrissa",
        "Hester",
        "Inigo",
        "Arlinda",
        "Charlton",
        "Elvis",
        "Nickey",
        "Marius",
        "Stella",
        "Hamid",
        "Isabelita",
        "Shepherd",
        "Karel",
        "Bernardo",
        "Moises",
        "Anetta",
        "Violet",
        "Nelie",
        "Thomas",
        "Milty",
        "Shepherd",
        "Manya",
        "Kyle",
        "Martie",
        "Isador",
        "Ruthanne",
        "Esther",
        "Lacie",
        "Annecorinne",
        "Hillard"
    ]

    private let lastNames = [
        "Lauthian",
        "Longworthy",
        "Kindon",
        "Kirwood",
        "Tointon",
        "Stodart",
        "Restieaux",
        "Tudor",
        "Overil",
        "Lebel",
        "Simnor",
        "Mougin",
        "Spurgeon",
        "Prozescky",
        "Hayland",
        "Lydon",
        "Bousfield",
        "Strange",
        "Becerra",
        "Boissier",
        "Brideoke",
        "Dann",
        "Twyford",
        "Swanson",
        "Everleigh",
        "Hritzko",
        "Goghin",
        "Draaisma",
        "Cogdon",
        "Skeat",
        "Gecks",
        "Auld",
        "Martinson",
        "Willard",
        "Heinig",
        "Glazzard",
        "Le Prevost",
        "Arp",
        "Hemmingway",
        "Joskovitch",
        "Brighty",
        "Banasiak",
        "Denman",
        "Prosh",
        "Whiscard",
        "Steanyng",
        "Szreter",
        "Neilus",
        "Grishanov",
        "Spatoni",
        "Mathet",
        "Shama",
        "Nanelli",
        "Barukh",
        "Carrier",
        "Karby",
        "Errichiello",
        "Skeggs",
        "Iacovuzzi",
        "Von Gladbach",
        "Hodge",
        "Horder",
        "Pitkins",
        "Stenett",
        "Penquet",
        "Wootton",
        "Pert",
        "Busch",
        "Suston",
        "Wiszniewski",
        "Bruster",
        "Fessions",
        "Drewitt",
        "Attril",
        "Likly",
        "Scholard",
        "Tott",
        "Shedd",
        "Peche",
        "Rosensaft",
        "Jenno",
        "Welfair",
        "Anlay",
        "Semark",
        "Sessions",
        "Canlin",
        "Shutler",
        "Rhucroft",
        "Tremain",
        "Easterfield",
        "Jeste",
        "Oxbrow",
        "Peddie",
        "Klemencic",
        "Richarson",
        "Noller",
        "Ebourne",
        "Blanpein",
        "Webby",
        "Diemer"
    ]
    
    private let phoneNumbers = [
        "+86 942 613 4731",
        "+850 440 528 0317",
        "+81 339 892 4135",
        "+963 896 122 5510",
        "+86 164 147 3913",
        "+81 876 283 1461",
        "+86 231 623 6223",
        "+423 206 361 7550",
        "+55 419 313 4273",
        "+86 336 599 2600",
        "+51 854 876 9572",
        "+86 598 968 3552",
        "+33 658 407 4982",
        "+62 548 780 3577",
        "+63 803 872 8083",
        "+380 191 270 7219",
        "+55 820 270 8252",
        "+86 410 591 6221",
        "+81 678 298 2755",
        "+63 498 728 4112",
        "+86 658 369 0919",
        "+27 173 341 8732",
        "+261 909 783 5005",
        "+86 508 511 8244",
        "+30 435 653 5927",
        "+1 218 493 4550",
        "+55 122 484 5156",
        "+86 957 572 8450",
        "+81 855 369 3648",
        "+351 450 348 6078",
        "+95 238 376 0660",
        "+66 716 234 9023",
        "+27 661 115 6165",
        "+86 981 483 3708",
        "+355 471 632 7685",
        "+352 442 291 5084",
        "+62 824 114 4522",
        "+86 460 649 7651",
        "+30 411 979 3084",
        "+382 297 371 3084",
        "+63 518 937 5172",
        "+63 908 570 3190",
        "+51 584 822 9167",
        "+353 144 210 9062",
        "+86 202 969 4699",
        "+86 684 470 6272",
        "+46 409 701 5613",
        "+55 425 332 2355",
        "+290 915 808 6410",
        "+7 215 553 7705",
        "+7 731 128 4067",
        "+420 586 253 8611",
        "+380 153 799 7461",
        "+55 386 297 1907",
        "+86 570 694 6839",
        "+48 913 164 3750",
        "+7 380 595 0462",
        "+242 238 498 7008",
        "+7 996 979 7786",
        "+358 441 161 0263",
        "+7 829 362 4164",
        "+30 340 986 8939",
        "+33 385 699 7851",
        "+62 120 969 1931",
        "+60 503 642 4704",
        "+234 754 849 8839",
        "+235 146 174 7439",
        "+81 235 140 3473",
        "+86 253 240 0830",
        "+389 178 611 8843",
        "+86 433 596 3606",
        "+353 303 124 0072",
        "+55 243 725 5697",
        "+251 857 646 0295",
        "+1 573 947 6766",
        "+86 958 126 9778",
        "+1 817 917 7927",
        "+66 426 842 2336",
        "+63 363 781 7808",
        "+48 392 254 2152",
        "+62 531 649 6328",
        "+55 595 995 5914",
        "+62 605 873 7259",
        "+7 750 496 0443",
        "+63 888 910 3970",
        "+62 217 377 2475",
        "+46 472 248 9681",
        "+244 606 860 5884",
        "+880 560 338 9025",
        "+1 513 864 4836",
        "+1 202 523 5276",
        "+1 410 616 2760",
        "+51 182 646 7402",
        "+54 321 159 2348",
        "+48 242 855 7494",
        "+86 606 735 5567",
        "+249 824 406 7971",
        "+55 172 182 6405",
        "+51 726 654 4563",
        "+31 825 296 4353"
    ]
    
    private let emails = [
        "afrancois0@mayoclinic.com",
        "klabadini1@symantec.com",
        "mseago2@java.com",
        "etibbles3@ask.com",
        "edobeson4@hibu.com",
        "ptesche5@canalblog.com",
        "emcphelimey6@auda.org.au",
        "jwait7@tripadvisor.com",
        "hkruschov8@ebay.co.uk",
        "hmawtus9@wikipedia.org",
        "athurgooda@livejournal.com",
        "hmoyceb@techcrunch.com",
        "rmccardlec@soup.io",
        "asidlowd@ycombinator.com",
        "ibraynee@reddit.com",
        "ainggallf@state.gov",
        "klilleg@paypal.com",
        "pcockaymeh@wikispaces.com",
        "sguieti@wix.com",
        "etrymej@apple.com",
        "pmarkiek@meetup.com",
        "pmanvellel@posterous.com",
        "sannandm@google.co.uk",
        "mpendridn@oaic.gov.au",
        "dpolglazeo@pinterest.com",
        "apercyp@theguardian.com",
        "lgendersq@usnews.com",
        "ayantsevr@youtu.be",
        "ibeades@noaa.gov",
        "mmackisont@amazonaws.com",
        "dhatzaru@xrea.com",
        "lswetlandv@infoseek.co.jp",
        "wbrilw@shop-pro.jp",
        "bmacnultyx@yahoo.co.jp",
        "tketteringhamy@nasa.gov",
        "mdellcasaz@gov.uk",
        "bmeaddowcroft10@wiley.com",
        "dbrompton11@economist.com",
        "tsenechell12@networksolutions.com",
        "edowner13@people.com.cn",
        "jverrier14@marriott.com",
        "jfleckno15@lycos.com",
        "ndandrea16@senate.gov",
        "agoldingay17@merriam-webster.com",
        "ameijer18@princeton.edu",
        "cmaylard19@upenn.edu",
        "hsketh1a@bing.com",
        "tfantham1b@arizona.edu",
        "gaberdein1c@hibu.com",
        "bkalinovich1d@fda.gov",
        "tmattiacci1e@furl.net",
        "bwarstall1f@gmpg.org",
        "lcuttles1g@google.cn",
        "dstollard1h@upenn.edu",
        "praynor1i@cbsnews.com",
        "aburgett1j@odnoklassniki.ru",
        "rpykerman1k@tripadvisor.com",
        "againeofengland1l@webs.com",
        "ssheriff1m@shutterfly.com",
        "jpaton1n@marriott.com",
        "kgrichukhin1o@vistaprint.com",
        "wjilliss1p@shutterfly.com",
        "kcaldecourt1q@linkedin.com",
        "pdelia1r@bravesites.com",
        "pbaumann1s@chicagotribune.com",
        "gbirkwood1t@marriott.com",
        "htitterton1u@ft.com",
        "hstirling1v@bluehost.com",
        "tdawdary1w@whitehouse.gov",
        "gpiggens1x@whitehouse.gov",
        "lhearson1y@youtu.be",
        "jyule1z@sogou.com",
        "ssexten20@flavors.me",
        "rwife21@webs.com",
        "tcalcut22@guardian.co.uk",
        "cdockray23@nyu.edu",
        "fantonucci24@tinyurl.com",
        "tsherewood25@macromedia.com",
        "bavent26@ucoz.ru",
        "kneame27@berkeley.edu",
        "jduhamel28@technorati.com",
        "sjenne29@istockphoto.com",
        "mchanner2a@taobao.com",
        "ldeporte2b@gravatar.com",
        "dedds2c@dmoz.org",
        "cmanuely2d@techcrunch.com",
        "focorrin2e@digg.com",
        "cfentem2f@oakley.com",
        "jbaterip2g@addtoany.com",
        "laitken2h@stanford.edu",
        "sdannatt2i@a8.net",
        "bharsnipe2j@mysql.com",
        "idemschke2k@w3.org",
        "hbaynon2l@php.net",
        "hgoldie2m@icq.com",
        "nphippard2n@jimdo.com",
        "trenad2o@disqus.com",
        "cmartinat2p@latimes.com",
        "lpressdee2q@virginia.edu",
        "smoreno2r@4shared.com"
    ]
    
    private let groups: [String] = ["Favorites", "Family", "Work", "Other"]

    func generateRandomContact(context: NSManagedObjectContext) -> Contact {
        let contactIndex = Int(arc4random_uniform(UInt32(firstNames.count)))
        let groupIndex = Int(arc4random_uniform(UInt32(groups.count)))
        
        let newContact: Contact = Contact(entity: Contact.entity(), insertInto: context)
        newContact.firstname = firstNames[contactIndex]
        newContact.lastname = lastNames[contactIndex]
        newContact.group = groups[groupIndex]
        return newContact
    }
    
    func generatePhone(type: String, context: NSManagedObjectContext) -> Phone {
        let phoneIndex = Int(arc4random_uniform(UInt32(phoneNumbers.count)))
        let newPhone: Phone = Phone(entity: Phone.entity(), insertInto: context)
        newPhone.phone = phoneNumbers[phoneIndex]
        newPhone.type = type
        return newPhone
    }
    
    func generateEmail(type: String, context: NSManagedObjectContext) -> Email {
        
        let emailIndex = Int(arc4random_uniform(UInt32(emails.count)))
        let newEmail: Email = Email(entity: Email.entity(), insertInto: context)
        newEmail.email = emails[emailIndex]
        newEmail.type = type
        return newEmail
    }
}
